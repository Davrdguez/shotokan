---
/* src/components/common/Header.astro
   Header accesible con dropdown “Más información” (desktop)
   y submenú colapsable (móvil). Mantiene tokens: bg-bg, text-fg, border-border. */

const nav = [
  { href: "/", label: "Inicio" },
  { href: "/classes", label: "Nuestras actividades" },
  {
    label: "Más información",
    children: [
      { href: "/mas-informacion/karate", label: "Karate" },
      { href: "/mas-informacion/mma-bjj", label: "MMA y BJJ" },
      { href: "/mas-informacion/iaido", label: "Iaído" },
      { href: "/mas-informacion/aikido", label: "Aikido" },
      { href: "/mas-informacion/taekwondo", label: "Taekwondo" },
      { href: "/mas-informacion/kung-fu", label: "Kung Fu" },
      { href: "/mas-informacion/kick-boxing", label: "Kick-Boxing" },
    ],
  },
  { href: "/horarios-de-atencion", label: "Horarios de atención" },
  { href: "/blog", label: "Noticias" },
  { href: "/contacto", label: "Contacto" },
];

const pathname = Astro.url.pathname;
const isActive = (href) => pathname === href || (href !== "/" && pathname.startsWith(href + "/"));
---

<header class="sticky top-0 z-50 bg-bg/80 backdrop-blur border-b border-border/40">
  <div class="container h-16 flex items-center justify-between">
    <!-- Logo -->
    <a href="/" class="flex items-center gap-2" aria-label="Shotokan Valladolid">
      <img src="/logo.png" alt="" class="h-10 w-auto md:h-12" />
    </a>

    <!-- Desktop Nav -->
    <nav class="hidden md:flex items-center gap-8 text-sm text-fg/80">
      {nav.map((item) => (
        item.children ? (
          <!-- Dropdown (desktop) -->
          <div class="relative" data-dropdown>
            <button
              type="button"
              class="inline-flex items-center gap-1 hover:text-fg transition-colors px-1 py-2 rounded-md focus:outline-none focus-visible:ring-2 focus-visible:ring-red-600/60"
              aria-haspopup="true"
              aria-expanded="false"
              data-dropdown-trigger
            >
              {item.label}
              <svg class="h-4 w-4 opacity-70 transition-transform data-[open=true]:rotate-180" viewBox="0 0 24 24" fill="none" data-chevron>
                <path d="M6 9l6 6 6-6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>

            <div
              class="absolute left-0 top-full mt-2 w-56 rounded-lg border border-border/40 bg-bg shadow-xl
                     p-2 opacity-0 translate-y-1 invisible transition
                     data-[open=true]:opacity-100 data-[open=true]:translate-y-0 data-[open=true]:visible"
              role="menu"
              tabindex="-1"
              data-dropdown-panel
            >
              <ul class="py-1">
                {item.children.map((child) => (
                  <li>
                    <a
                      href={child.href}
                      class={`block rounded-md px-3 py-2 hover:bg-white/5 hover:text-fg focus:outline-none focus-visible:ring-2 focus-visible:ring-red-600/60 ${
                        isActive(child.href) ? "text-fg" : ""
                      }`}
                      role="menuitem"
                    >
                      {child.label}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        ) : (
          <a
            href={item.href}
            class={`hover:text-fg transition-colors px-1 py-2 rounded-md focus:outline-none focus-visible:ring-2 focus-visible:ring-red-600/60 ${
              isActive(item.href) ? "text-fg" : ""
            }`}
            aria-current={isActive(item.href) ? "page" : undefined}
          >
            {item.label}
          </a>
        )
      ))}
      <a
        href="/contacto"
        class="inline-flex items-center rounded-full bg-fg px-4 py-2 text-xs font-semibold text-bg hover:opacity-90 transition"
      >
        Reservar clase
      </a>
    </nav>

    <!-- Mobile Hamburger -->
    <button
      class="md:hidden inline-flex items-center justify-center w-10 h-10 rounded-md border border-border text-fg"
      aria-label="Abrir menú"
      aria-controls="mobile-drawer"
      aria-expanded="false"
      id="menu-toggle"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M4 6h16M4 12h16M4 18h16" />
      </svg>
    </button>
  </div>

  <!-- Overlay -->
  <div id="overlay" class="fixed inset-0 z-40 hidden bg-black/50"></div>

  <!-- Mobile Drawer -->
  <aside
    id="mobile-drawer"
    class="fixed left-0 top-0 z-50 h-dvh w-80 max-w-[85%] -translate-x-full bg-bg border-r border-border/40 transition-transform duration-300 ease-out"
    tabindex="-1"
    aria-hidden="true"
  >
    <div class="flex items-center justify-between h-16 px-4 border-b border-border/40">
      <a href="/" class="flex items-center">
        <img src="/logo.png" alt="Shotokan Valladolid" class="h-8 w-auto" />
      </a>
      <button
        id="menu-close"
        class="inline-flex items-center justify-center w-10 h-10 rounded-md border border-border text-fg"
        aria-label="Cerrar menú"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <nav class="p-6 flex flex-col gap-2 text-base text-fg/90">
      {nav.map((item) => (
        item.children ? (
          <details class="group">
            <summary class="flex items-center justify-between cursor-pointer list-none px-1 py-3 rounded-md focus:outline-none focus-visible:ring-2 focus-visible:ring-red-600/60">
              <span>{item.label}</span>
              <svg class="h-4 w-4 transition-transform group-open:rotate-180" viewBox="0 0 24 24" fill="none">
                <path d="M6 9l6 6 6-6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </summary>
            <ul class="ml-2 mb-2 border-l border-border/40">
              {item.children.map((child) => (
                <li>
                  <a
                    href={child.href}
                    class={`block px-3 py-2 rounded-md hover:text-fg hover:bg-white/5 focus:outline-none focus-visible:ring-2 focus-visible:ring-red-600/60 ${
                      isActive(child.href) ? "text-fg" : ""
                    }`}
                  >
                    {child.label}
                  </a>
                </li>
              ))}
            </ul>
          </details>
        ) : (
          <a
            href={item.href}
            class={`px-1 py-3 rounded-md hover:text-fg transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-red-600/60 ${
              isActive(item.href) ? "text-fg" : ""
            }`}
          >
            {item.label}
          </a>
        )
      ))}

      <a
        href="/contact"
        class="mt-3 inline-flex items-center justify-center rounded-lg bg-fg px-5 py-3 text-sm font-semibold text-bg hover:opacity-90 transition"
      >
        Reservar clase
      </a>
    </nav>
  </aside>

  <script is:inline>
    // ===== Drawer móvil =====
    const toggle = document.getElementById('menu-toggle');
    const closeBtn = document.getElementById('menu-close');
    const drawer = document.getElementById('mobile-drawer');
    const overlay = document.getElementById('overlay');

    const openMenu = () => {
      drawer.classList.remove('-translate-x-full');
      overlay.classList.remove('hidden');
      toggle?.setAttribute('aria-expanded', 'true');
      drawer?.removeAttribute('aria-hidden');
      document.documentElement.style.overflow = 'hidden';
      drawer?.focus();
    };
    const closeMenu = () => {
      drawer.classList.add('-translate-x-full');
      overlay.classList.add('hidden');
      toggle?.setAttribute('aria-expanded', 'false');
      drawer?.setAttribute('aria-hidden', 'true');
      document.documentElement.style.overflow = '';
      toggle?.focus();
    };

    toggle?.addEventListener('click', openMenu);
    closeBtn?.addEventListener('click', closeMenu);
    overlay?.addEventListener('click', closeMenu);
    drawer?.querySelectorAll('a').forEach((a) => a.addEventListener('click', closeMenu));
    document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && !drawer.classList.contains('-translate-x-full')) closeMenu(); });

    // ===== Dropdown accesible (desktop) =====
    const CLOSE_DELAY = 200; // ms de tolerancia al salir del botón
    document.querySelectorAll('[data-dropdown]').forEach((wrap) => {
      const btn = wrap.querySelector('[data-dropdown-trigger]');
      const panel = wrap.querySelector('[data-dropdown-panel]');
      const chevron = wrap.querySelector('[data-chevron]');
      let closeTimer = null;
      let opened = false;

      const setOpen = (v) => {
        opened = v;
        btn.setAttribute('aria-expanded', String(v));
        panel.dataset.open = String(v);
        if (chevron) chevron.dataset.open = String(v);
      };
      const clearCloseTimer = () => { if (closeTimer) { clearTimeout(closeTimer); closeTimer = null; } };
      const scheduleClose = () => { clearCloseTimer(); closeTimer = setTimeout(() => setOpen(false), CLOSE_DELAY); };

      // Click/touch: primer click abre, segundo cierra
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        setOpen(!opened);
        if (!opened) panel.focus({ preventScroll: true });
      });

      // Mantener abierto al pasar entre trigger y panel
      btn.addEventListener('pointerenter', () => { clearCloseTimer(); setOpen(true); });
      btn.addEventListener('pointerleave', scheduleClose);
      panel.addEventListener('pointerenter', clearCloseTimer);
      panel.addEventListener('pointerleave', scheduleClose);

      // Cerrar con click fuera
      document.addEventListener('pointerdown', (e) => { if (!wrap.contains(e.target)) setOpen(false); });

      // Teclado
      btn.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowDown') {
          e.preventDefault();
          setOpen(true);
          panel.querySelector('a')?.focus();
        }
      });
      panel.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') { setOpen(false); btn.focus(); }
        if (e.key === 'Tab') {
          const focusables = [...panel.querySelectorAll('a,button')];
          const first = focusables[0], last = focusables[focusables.length - 1];
          if (focusables.length) {
            if (!e.shiftKey && document.activeElement === last) setOpen(false);
            if (e.shiftKey && document.activeElement === first) setOpen(false);
          }
        }
      });

      // Enlaces del panel: al hacer click/touch, cerrar
      panel.querySelectorAll('a').forEach(a => {
        a.addEventListener('click', () => setOpen(false));
        a.addEventListener('touchend', () => setOpen(false), { passive: true });
      });
    });
  </script>
</header>
